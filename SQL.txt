create database event;

use event;

drop table Login;


create table SignUp(
Id int(3),
Username varchar(100),
Email varchar(100),
SignUpPassword varchar(255),
ConfirmSignUpPassword varchar(255)
);

addevent
Id	varchar(3)	NO	PRI		
Category	varchar(50)	YES	UNI		
Location	varchar(50)	YES			
Capacity	varchar(50)	YES			
Amount	varchar(50)	YES			
Description	varchar(100)	YES			
Status	varchar(50)	YES			
Address	varchar(300)	YES			
Contact	varchar(10)	YES			
ImagePath	varchar(600)	YES			



delimiter //
CREATE PROCEDURE `GetAllUser`()
begin
	select * from SignUp;
end //
delimiter ;



delimiter //
CREATE PROCEDURE `GetUserPassword`(
	IN IEmail varchar(100)
)
BEGIN
	 SELECT SPassword from SignUp where Email = IEmail;
END //
delimiter ;




delimiter //
CREATE  PROCEDURE `InsertUser`(
	IN UserName varchar(100),
	IN Email varchar(100),
	IN SPassword varchar(100)
)
BEGIN
	INSERT INTO SignUp(Username, Email, SPassword)
	VALUES(UserName,Email,md5(SPassword)); 
END //
delimiter ;



delimiter //
CREATE PROCEDURE `CheckEmailExist`(IN newEmail VARCHAR(60))
BEGIN
    DECLARE emailExists BOOLEAN;
    SELECT EXISTS(
		SELECT 1 FROM SignUp WHERE Email = newEmail
	) INTO emailExists;
    SELECT emailExists AS IsExists;
END //
delimiter ;



delimiter //
create procedure EncryptMD5(
	IN existingEmail varchar(255),
	IN existingPassword varchar(255)
)
begin
	select Email, SPassword from SignUp 
    where Email=existingEmail and SPassword = MD5(existingPassword);
END //
delimiter ;

delimiter//
CREATE PROCEDURE `GetPassword`(
	IN user_pass varchar(100)
)
BEGIN
	select MD5(user_pass);
END //
delimiter ;

CREATE DEFINER=`root`@`localhost` PROCEDURE `AddEventInsert`(
	IN Id varchar(3),
    IN Category varchar(50),
    IN Location varchar(50),
    IN Capacity varchar(10),
    IN Amount varchar(50),
    IN Description varchar(200),    
    IN Status varchar(50),	
	IN Address varchar(100),	
	IN Contact varchar(10),
    IN ImagePath varchar(600)
)
BEGIN
	INSERT INTO addevent(Id, Category, Location, Capacity, Amount, Description, Status, Address, Contact, ImagePath)
    VALUES(Id,Category,Location,Capacity, Amount, Description, Status, Address, Contact, ImagePath);
END

CREATE DEFINER=`root`@`localhost` PROCEDURE `DeleteAddEventById`(
    IN Id varchar(3)
)
BEGIN
    DELETE FROM addevent
    WHERE Id = Id;
END

CREATE DEFINER=`root`@`localhost` PROCEDURE `GetAddEventbyId`(IN id varchar(3))
BEGIN
    SELECT * FROM addevent WHERE Id = id;
END

CREATE DEFINER=`root`@`localhost` PROCEDURE `GetAllEvent`()
BEGIN
	SELECT * from addevent;
END

CREATE DEFINER=`root`@`localhost` PROCEDURE `GetDBImagebyID`(IN ID varchar(3))
BEGIN
    SELECT ImagePath FROM addevent WHERE Id = ID;
END

CREATE DEFINER=`root`@`localhost` PROCEDURE `GetRole`(
	IN IEmail varchar(100)
)
BEGIN
	 SELECT AccessRole from SignUp where Email = IEmail;
END

CREATE DEFINER=`root`@`localhost` PROCEDURE `UpdateaddEventById`(
    IN Id varchar(3),
    IN Category varchar(50),
    IN Location varchar(50),
    IN Capacity varchar(10),
    IN Amount varchar(50),
    IN Description varchar(200),    
    IN Status varchar(50),	
	IN Address varchar(100),	
	IN Contact varchar(10),
    IN ImagePath varchar(600)
)
BEGIN
    UPDATE addevent
    SET
        Category = Category,
        last_name = last_name,
        Location = Location,
        Capacity = Capacity,
        Amount = Amount,
        Description = Description,
		Status = Status,
		Address = Address,
		Contact = Contact,
		ImagePath = ImagePath
    WHERE Id = Id;
END

Delimiter //
CREATE PROCEDURE `GetAllAdmin_User`()
begin
	select * from SignUp;
end //
Delimiter ;

Delimiter //
CREATE PROCEDURE InsertAdmin_User(
	IN UserName varchar(100),
	IN Email varchar(100),
	IN SPassword varchar(100),
    IN AccessRole varchar(100)
)
BEGIN
	INSERT INTO SignUp(Username, Email, SPassword, AccessRole)
	VALUES(UserName,Email,md5(SPassword), AccessRole); 
END //
Delimiter ;

Delimiter //
CREATE PROCEDURE GetAdmin_UserbyId(in id int)
BEGIN
	select * from SignUp where Id = id;
END //
Delimiter ;

Delimiter //
CREATE PROCEDURE Updateadmin_userById(
    IN u_Id int,
    IN Username varchar(50),
    IN Email varchar(50)
)
BEGIN
    UPDATE addevent
    SET
		Username = Username,
		Email = Email
    WHERE Id = u_Id;
END //
Delimiter ;

Delimiter //
CREATE PROCEDURE `Deleteadmin_userById`(
    IN deleteId int
)
BEGIN
    DELETE FROM signup
    WHERE Id = deleteId;
END //
delimiter ;

CREATE DEFINER=`root`@`localhost` PROCEDURE `CheckEmailExist`(IN p_EmailId VARCHAR(60), IN p_Id INT)
BEGIN
    DECLARE emailExists BOOLEAN;
    
    IF p_Id IS NULL THEN
        SELECT EXISTS(
		    SELECT 1 FROM SignUp WHERE Email = p_EmailId
	    ) INTO emailExists;
    ELSE
        SELECT EXISTS(
		    SELECT 1 FROM SignUp WHERE Email = p_EmailId AND Id != p_Id
	    ) INTO emailExists;
    END IF;
    
    SELECT emailExists AS IsExists;
END



CREATE DEFINER=`root`@`localhost` PROCEDURE `UpdateStatusById`(
IN u_status_id INT
)
BEGIN
	UPDATE bookevent
    SET status_id = u_status_id
    WHERE Id = u_Id;
END


CREATE DEFINER=`root`@`localhost` PROCEDURE `PopulateAddEventbyId`(in p_id int)
begin
	SELECT addevent.Id, addevent.Category, addevent.Location,
		addevent.Capacity, addevent.Amount, addevent.Description,
        addevent.Address, addevent.Contact, addevent.ImagePath,
        eventstatus.status_name
        from addevent INNER JOIN  eventstatus
        ON addevent.status_id = eventstatus.status_id 
        where addevent.Id = p_id;
end

CREATE DEFINER=`root`@`localhost` PROCEDURE `UpdateStatusById`(
IN u_status_id INT
)
BEGIN
	UPDATE bookevent
    SET status_id = u_status_id
    WHERE Id = u_Id;
END

CREATE DEFINER=`root`@`localhost` PROCEDURE `UpdateadminById`(
    IN u_Id int,
    IN Username varchar(50),
    IN Email varchar(50)
)
BEGIN
    UPDATE signup
    SET
		Username = Username,
		Email = Email
    WHERE Id = u_Id;
END


CREATE DEFINER=`root`@`localhost` PROCEDURE `Updateadmin_userById`(
    IN u_Id int,
    IN Username varchar(50),
    IN Email varchar(50)
)
BEGIN
    UPDATE signup
    SET
		Username = Username,
		Email = Email
    WHERE Id = u_Id;
END


CREATE DEFINER=`root`@`localhost` PROCEDURE `UpdateaddEventById`(
    IN u_Id int,
    IN u_Category varchar(50),
    IN u_Location varchar(50),
    IN u_Capacity varchar(10),
    IN u_Amount varchar(50),
    IN u_Description varchar(200),    	
	IN u_Address varchar(100),	
	IN u_Contact varchar(10),
    IN u_ImagePath varchar(600),
	IN u_Status_id INT
)
BEGIN
    UPDATE addevent
    SET
        Category = u_Category,
        Location = u_Location,
        Capacity = u_Capacity,
        Amount = u_Amount,
        Description = u_Description,
		Address = u_Address,
		Contact = u_Contact,
		ImagePath = u_ImagePath,
		status_id = u_Status_id
    WHERE Id = u_Id;
END


CREATE DEFINER=`root`@`localhost` PROCEDURE `PopulateBookedEvents`(
IN p_Id int
)
BEGIN
	SELECT 
	signup.Username, signup.Email, addevent.Category, addevent.Location, addevent.Capacity,
    addevent.Amount, addevent.Contact, addevent.ImagePath, bookevent.Deposit, bookevent.Balance, 
    bookevent.Date, bookevent.Time, eventstatus.status_name
FROM bookevent
INNER JOIN addevent 
	ON bookevent.addevent_id = addevent.Id
INNER JOIN signup 
	ON bookevent.signup_id = signup.Id
INNER JOIN eventstatus 
	ON bookevent.status_id = eventstatus.status_id
where bookevent.Id = p_Id;
END

CREATE DEFINER=`root`@`localhost` PROCEDURE `InsertUser`(
	IN UserName varchar(100),
	IN Email varchar(100),
	IN SPassword varchar(100),
    IN u_RoleId int
)
BEGIN
	INSERT INTO SignUp(Username, Email, SPassword, RoleId)
	VALUES(UserName,Email,md5(SPassword), u_RoleId); 
END

CREATE DEFINER=`root`@`localhost` PROCEDURE `InsertCustomerBookData`(
IN p_Username VARCHAR(50),
IN p_Email VARCHAR(55), 
IN p_SPassword VARCHAR(45),
IN p_RoleId INT,
IN p_Deposit varchar(45),
IN p_Balance varchar(45),  
IN p_Date Date, 
IN p_Time Time, 
IN p_addevent_id INT,
IN p_Status_id INT
)
BEGIN
	DECLARE last_id INT;
	INSERT INTO signup (Username, Email, SPassword,RoleId) VALUES (p_Username, p_Email, md5(p_SPassword),p_RoleId);
	SET last_id = LAST_INSERT_ID();
	INSERT INTO bookevent (Deposit, Balance, Date, Time,addevent_id,signup_id,status_id) VALUES (p_Deposit,p_Balance,p_Date,p_Time,p_addevent_id,last_id,p_Status_id);
END

CREATE DEFINER=`root`@`localhost` PROCEDURE `InsertbookEvent`(
	IN a_Deposit varchar(50),
    IN a_Balance varchar(50),
	IN a_Date Date,
	IN a_Time Time,
	IN a_addEvent_id INT,
	IN a_signup_id INT,
	IN a_Status_id INT
)
BEGIN
	INSERT INTO bookevent(Deposit, Balance, Date, Time, addevent_id, signup_id, status_id)
	VALUES(a_Deposit,a_Balance,a_Date,a_Time,a_addEvent_id,a_signup_id,a_Status_id); 
END

CREATE DEFINER=`root`@`localhost` PROCEDURE `InsertCustomerBookData`(
IN p_Username VARCHAR(50),
IN p_Email VARCHAR(55), 
IN p_SPassword VARCHAR(45),
IN p_RoleId INT,
IN p_Deposit varchar(45),
IN p_Balance varchar(45),  
IN p_Date Date, 
IN p_Time Time, 
IN p_addevent_id INT,
IN p_Status_id INT
)
BEGIN
	DECLARE last_id INT;
	INSERT INTO signup (Username, Email, SPassword,RoleId) VALUES (p_Username, p_Email, md5(p_SPassword),p_RoleId);
	SET last_id = LAST_INSERT_ID();
	INSERT INTO bookevent (Deposit, Balance, Date, Time,addevent_id,signup_id,status_id) VALUES (p_Deposit,p_Balance,p_Date,p_Time,p_addevent_id,last_id,p_Status_id);
END

CREATE DEFINER=`root`@`localhost` PROCEDURE `InsertbookEvent`(
	IN a_Deposit varchar(50),
    IN a_Balance varchar(50),
	IN a_Date Date,
	IN a_Time Time,
	IN a_addEvent_id INT,
	IN a_signup_id INT,
	IN a_Status_id INT
)
BEGIN
	INSERT INTO bookevent(Deposit, Balance, Date, Time, addevent_id, signup_id, status_id)
	VALUES(a_Deposit,a_Balance,a_Date,a_Time,a_addEvent_id,a_signup_id,a_Status_id); 
END

CREATE DEFINER=`root`@`localhost` PROCEDURE `InsertbookEvent`(
	IN a_Deposit varchar(50),
    IN a_Balance varchar(50),
	IN a_Date Date,
	IN a_Time Time,
	IN a_addEvent_id INT,
	IN a_signup_id INT,
	IN a_Status_id INT
)
BEGIN
	INSERT INTO bookevent(Deposit, Balance, Date, Time, addevent_id, signup_id, status_id)
	VALUES(a_Deposit,a_Balance,a_Date,a_Time,a_addEvent_id,a_signup_id,a_Status_id); 
END

CREATE DEFINER=`root`@`localhost` PROCEDURE `InsertAdmin_User`(
	IN UserName varchar(100),
	IN Email varchar(100),
	IN SPassword varchar(100),
    IN u_RoleId int
)
BEGIN
	INSERT INTO SignUp(Username, Email, SPassword, RoleId)
	VALUES(UserName,Email,md5(SPassword), u_RoleId); 
END

CREATE DEFINER=`root`@`localhost` PROCEDURE `InsertAdmin`(
	IN UserName varchar(100),
	IN Email varchar(100),
	IN SPassword varchar(100),
    IN u_RoleId int
)
BEGIN
	INSERT INTO SignUp(Username, Email, SPassword, RoleId)
	VALUES(UserName,Email,md5(SPassword), u_RoleId); 
END

CREATE DEFINER=`root`@`localhost` PROCEDURE `GetUserPassword`(
	IN IEmail varchar(100)
)
BEGIN
	 SELECT SPassword from SignUp where Email = IEmail;
END

CREATE DEFINER=`root`@`localhost` PROCEDURE `GetRole`(
	IN IEmail varchar(100)
)
BEGIN
	 SELECT RoleId from SignUp where Email = IEmail;
END

CREATE DEFINER=`root`@`localhost` PROCEDURE `GetPassword`(
	IN user_pass varchar(100)
)
BEGIN
	select MD5(user_pass);
END

CREATE DEFINER=`root`@`localhost` PROCEDURE `GetId`(
	IN IEmail varchar(100)
)
BEGIN
	 SELECT Id from SignUp where Email = IEmail;
END

CREATE DEFINER=`root`@`localhost` PROCEDURE `GetDBImagebyID`(IN u_ID int)
BEGIN
    SELECT ImagePath FROM addevent WHERE Id = u_ID;
END

CREATE DEFINER=`root`@`localhost` PROCEDURE `GetbookEventbyId`(in p_id int)
begin
	select * from addevent
	LEFT JOIN bookevent
	ON bookevent.addevent_Id = addevent.Id
    where addevent.Id = p_id;
end

CREATE DEFINER=`root`@`localhost` PROCEDURE `GetAllUser`()
begin
	select * from SignUp;
end

CREATE DEFINER=`root`@`localhost` PROCEDURE `GetAllEvent`()
BEGIN
	SELECT addevent.Id, addevent.Category, addevent.Location,
		addevent.Capacity, addevent.Amount, addevent.Description,
        addevent.Address, addevent.Contact, addevent.ImagePath,
        eventstatus.status_name
        from addevent INNER JOIN  eventstatus
        ON addevent.status_id = eventstatus.status_id;
END

CREATE DEFINER=`root`@`localhost` PROCEDURE `GetAllBookedEvents`()
BEGIN
	SELECT 
	bookevent.Id, signup.Username, signup.Email, addevent.Category, addevent.Location, addevent.Capacity,
    addevent.Amount, addevent.Contact, addevent.ImagePath, bookevent.Deposit, bookevent.Balance, 
    bookevent.Date, bookevent.Time, eventstatus.status_name
FROM bookevent
INNER JOIN addevent 
	ON bookevent.addevent_id = addevent.Id
INNER JOIN signup 
	ON bookevent.signup_id = signup.Id
INNER JOIN eventstatus
	ON bookevent.status_id = eventstatus.status_id;
END

CREATE DEFINER=`root`@`localhost` PROCEDURE `GetAllAdmin_User`()
begin
	select * from SignUp where RoleId = 2;
end

CREATE DEFINER=`root`@`localhost` PROCEDURE `GetAllAdmin`()
begin
	select * from SignUp where RoleId = 1;
end

CREATE DEFINER=`root`@`localhost` PROCEDURE `AddEventInsert`(
    IN a_Category varchar(50),
    IN a_Location varchar(50),
    IN a_Capacity varchar(10),
    IN a_Amount varchar(50),
    IN a_Description varchar(200),    	
	IN a_Address varchar(100),	
	IN a_Contact varchar(10),
    IN a_ImagePath varchar(600),
	IN a_Status_Id INT
)
BEGIN
	INSERT INTO addevent(Category, Location, Capacity, Amount, Description, Address, Contact, ImagePath, status_id)
    VALUES(a_Category,a_Location,a_Capacity, a_Amount, a_Description, a_Status, a_Address, a_Contact, a_ImagePath, a_Status_Id);
END

CREATE DEFINER=`root`@`localhost` PROCEDURE `CheckEmailExist`(IN p_EmailId VARCHAR(60), IN p_Id INT)
BEGIN
    DECLARE emailExists BOOLEAN;
    
    IF p_Id IS NULL THEN
        SELECT EXISTS(
		    SELECT 1 FROM SignUp WHERE Email = p_EmailId
	    ) INTO emailExists;
    ELSE
        SELECT EXISTS(
		    SELECT 1 FROM SignUp WHERE Email = p_EmailId AND Id != p_Id
	    ) INTO emailExists;
    END IF;
    
    SELECT emailExists AS IsExists;
END

CREATE DEFINER=`root`@`localhost` PROCEDURE `DeleteAddEventById`(
    IN deleteId int
)
BEGIN
    DELETE FROM addevent
    WHERE Id = deleteId;
END

CREATE DEFINER=`root`@`localhost` PROCEDURE `Deleteadmin_userById`(
    IN deleteId int
)
BEGIN
    DELETE FROM signup
    WHERE Id = deleteId;
END

CREATE DEFINER=`root`@`localhost` PROCEDURE `EncryptMD5`(
	IN existingEmail varchar(255),
	IN existingPassword varchar(255)
)
begin
	select * from SignUp where Email=existingEmail and SPassword = MD5(existingPassword);
END

CREATE DEFINER=`root`@`localhost` PROCEDURE `CheckDateAvailable`(IN newDate Date)
BEGIN
	DECLARE dateExists BOOLEAN;
    SELECT EXISTS(
		SELECT 1 FROM bookevent WHERE Date = newDate
	) INTO dateExists;
    SELECT dateExists AS IsExists;
END